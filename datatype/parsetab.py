
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON DOUBLE EQUAL FLOAT IDENTIFIER INT LPAREN NUMBER RPAREN STRING STRING_TYPEstatement : declaration\n| assignment\n| type_declarationdeclaration : type IDENTIFIER EQUAL expression\n| type IDENTIFIER COLON expression\n| IDENTIFIER COLON type\n| IDENTIFIER EQUAL type LPAREN expression RPAREN\n| IDENTIFIERtype_declaration : IDENTIFIER COLON type EQUAL expressionassignment : IDENTIFIER EQUAL expressiontype : INT\n| FLOAT\n| STRING_TYPE\n| DOUBLEexpression : NUMBER\n| STRING\n| type LPAREN expression RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,5,7,8,9,10,],[6,11,-11,-12,-13,-14,]),'INT':([0,12,13,14,15,24,25,26,],[7,7,7,7,7,7,7,7,]),'FLOAT':([0,12,13,14,15,24,25,26,],[8,8,8,8,8,8,8,8,]),'STRING_TYPE':([0,12,13,14,15,24,25,26,],[9,9,9,9,9,9,9,9,]),'DOUBLE':([0,12,13,14,15,24,25,26,],[10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,6,7,8,9,10,16,18,19,20,22,23,27,30,31,],[0,-1,-2,-3,-8,-11,-12,-13,-14,-6,-10,-15,-16,-4,-5,-9,-7,-17,]),'COLON':([6,11,],[12,15,]),'EQUAL':([6,7,8,9,10,11,16,],[13,-11,-12,-13,-14,14,24,]),'LPAREN':([7,8,9,10,17,21,],[-11,-12,-13,-14,25,26,]),'NUMBER':([13,14,15,24,25,26,],[19,19,19,19,19,19,]),'STRING':([13,14,15,24,25,26,],[20,20,20,20,20,20,]),'RPAREN':([19,20,28,29,31,],[-15,-16,30,31,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'declaration':([0,],[2,]),'assignment':([0,],[3,]),'type_declaration':([0,],[4,]),'type':([0,12,13,14,15,24,25,26,],[5,16,17,21,21,21,21,21,]),'expression':([13,14,15,24,25,26,],[18,22,23,27,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> declaration','statement',1,'p_statement','parser.py',9),
  ('statement -> assignment','statement',1,'p_statement','parser.py',10),
  ('statement -> type_declaration','statement',1,'p_statement','parser.py',11),
  ('declaration -> type IDENTIFIER EQUAL expression','declaration',4,'p_declaration','parser.py',15),
  ('declaration -> type IDENTIFIER COLON expression','declaration',4,'p_declaration','parser.py',16),
  ('declaration -> IDENTIFIER COLON type','declaration',3,'p_declaration','parser.py',17),
  ('declaration -> IDENTIFIER EQUAL type LPAREN expression RPAREN','declaration',6,'p_declaration','parser.py',18),
  ('declaration -> IDENTIFIER','declaration',1,'p_declaration','parser.py',19),
  ('type_declaration -> IDENTIFIER COLON type EQUAL expression','type_declaration',5,'p_type_declaration','parser.py',42),
  ('assignment -> IDENTIFIER EQUAL expression','assignment',3,'p_assignment','parser.py',46),
  ('type -> INT','type',1,'p_type','parser.py',50),
  ('type -> FLOAT','type',1,'p_type','parser.py',51),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',52),
  ('type -> DOUBLE','type',1,'p_type','parser.py',53),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',57),
  ('expression -> STRING','expression',1,'p_expression','parser.py',58),
  ('expression -> type LPAREN expression RPAREN','expression',4,'p_expression','parser.py',59),
]
